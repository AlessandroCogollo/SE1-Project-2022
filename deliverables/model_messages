//message UDP of server
time: //time is in all message for keeping the last message arrived
StringMessage: "I'm a Eriantys Server"
ip:
port:





//message from client to server after have read UDP message
time:
errorCode:
StringMessage: "I'm a Eriantys Client"
myIp:
myPort:





//message from server after first message from client

//if 1^ client
time:
errorCode:
StringMessage: "I'm the Eriantys Server, give me the login"
ip:
port:
youAreFirst: true

//if not 1^
time:
errorCode:
StringMessage: "I'm the Eriantys Server, give me the login"
ip:
port:
youAreFirst: false





//message from client

time:
errorCode:

//if youArefirst true																//if not first
StringMessage: "I'm the Eriantys Client, sended login and game Info" 		or 		StringMessage: "I'm the Eriantys Client, sended login and game Info"

username:
wizard:

//only if youArefirst true
numOfPlayer:
gameMode:





//message from server
time:
errorCode:
StringMessage: "I'm the Eriantys Server, received login. Wait for the start of the game"
yourId:





//message from client
time:
errorCode:
StringMessage: "I'm the Eriantys Client, received id. I'll wait"





//Now the client are ready for receiving the first model and start the game





//message from server to client after the start of game
time:	//time is in all message for keeping the last message arrived
errorCode: //0 if no error
gameMode:
playerNumber:
winnerId:

id giocatore corrente:

phase:
actionPhase:
student moved this turn:

motherNature: island id;

Islands: {
	(
	id:
	students: [5 int]
	towerNumber:
	towerColor:
	stopCard: int
	)
	//for each island (aggregated island can be inferred by the number of tower)
}
Clouds {
	(
	id:
	students: [5 int]
	)
	//for each clouds
}
Professors{
	(
	colorIndex:
	playerId:
	)
	// for each professor (5 because there are 5 color)
}
Players: {
	(
	id:
	name:
	activeAssistant:
	AsistantInHand: [] //array of value of assistant
	entranceStudents: [5 int]
	roomStudents: [5 int]
	towerColor:
	towerInSchool:
	mateId:
	)
	//for each player
}
//if Advanced Game
CharactersPlayable: []
PlayerAdvanced {
	(
	id:
	activeCharacter:
	coins:
	)
	// for each player
}










//message from client to server after the star of the game

//if not current player
time:
errorCode: // something for: Not Current Player, i'll wait
myId:

//if current player
time:
errorCode: // something for: Current Player, sended move
myId:

moveId:

//esempi moveId
	//1: Play assistant
AssistantValue:

	//2: Move Student
indexColorToMove:
idIsland: //if move to room id = 0

	//3: motherNature
positions:

	//4: chooseCloud
cloudId:

	//5: PlayCharacter
characterId:





//ping message from the server and the client to keep alive the connectio
time:
errorCode: ping code
StringMessage: "Ping"





//if one of the client go down and the game has to interrupt, message from server after the timeout for that client (if the server go down there aren't messages, so the timeout from the player ended the game)
time:
errorCode: //game closed
StringMessage: "I'm the Eriantys Server, Game Stopped due to user disconnection"
